#!/bin/bash
set -ufC  # "-u" (error when using uninitialised variables),
# "-f" (disable pathname expansion) and "-C" (no-clobber / -overwrite).
# Ultimately decided against "-e", because this script better runs through,
# despite minor errors.
set -o pipefail  # May not be supported, busybox's ash and bash do.
export POSIXLY_CORRECT=1  # Can have side-effects (positive and negative).
export LC_ALL=POSIX  # For details see https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap08.html#tag_08_02

# Specify bash as interpreter of this script (in its first line), as this ensures
# that "-o pipefail" is available (for its use in the third line), after checking
# that bash seems to be present in mer-core at least since 2011-10-04 (see
# https://github.com/sailfishos/mer-core/bash / https://git.merproject.org/mer-core/bash )
# and consequently in SailfishOS since its beginnings (checked v1.0.0.5 per
# curl https://releases.sailfishos.org/sources/sailfish-1.0.0.5-oss.tar.bz2 | tar -tv | fgrep bash
# , as no earlier released version is available there, e.g. the first ones at
# https://coderus.openrepos.net/whitesoft/sailversion ).
# In SailfishOS releases before 4.0, /bin/sh is just a symbolic link to /bin/bash
# anyway.  Since SailfishOS 4.0, the busybox variant of ash has become the shell
# installed by default, which provides some bash compatibility (implicitly, when
# called via its bash-symlink, which is deployed by the busybox-symlinks-bash
# RPM), including "-o pipefail", but not "-o posix"; although setting
# POSIXLY_CORRECT instead seems to achive the same without compatibility issues,
# plus (when exported) also for a number of other GNU utilities.
# Nevertheless, this script is still a Bourne (not-"Again") Shell script and
# shall stay free of bashisms.

# This script is designed to be called fully detached (by a "double fork"
# / a "daemonize") as the last statement of the %posttrans scriptlet
# (the last executed) of an RPM spec file or directly (e.g., in a shell).

# Memorise how we were called (argument checks are primarily intended for interactive use):
mypid="$$"
called="$(basename "$0")"
if [ $# != 2 ]
then
  echo "[${called}] Number of parameters is not 2, but ${#}: exiting!" >&2
  exit 67
fi
gppid="$1"
if ! echo "$gppid" | grep -q '^[1-9][0-9]*$'
then
  echo "[${called}] The first parameter $gppid is not a number: exiting!" >&2
  exit 68
fi
logfile="$2"

# $called was called with these redirections already set in %posttrans
# exec <&-            # Close StdIN
# exec >> "$logfile"  # Redirect StdOUT, appendingly
# exec 2>&1           # Map StdERR to (redirected) StdOUT

umask 113
[ "$PWD" = / ] || cd /  # Set PWD to /, if not already

# Prefix first output with a linebreak, dashes and another linebreak, if logfile size > 0
if [ -s "$logfile" ]
then printf '\n%s\n\n' "-----------------------------"
fi

# Write first entry to logfile:
logentry="[Info] PID $mypid is logging to $logfile on"
if printf '%s %s\n' "$logentry" "$(date -Iseconds)"
then systemd-cat -t "$called" -p 6 printf '%s\n' "$logentry"
else systemd-cat -t "$called" -p 4 printf '%s\n' "[Warning] PID $mypid failed to write to $logfile"
fi

# Log some status data:
source /etc/os-release; logentry="[Debug] From /etc/os-release: $ID $VERSION_ID $SAILFISH_FLAVOUR"
printf '\n%s\n' "$(date -Iseconds) $logentry"
systemd-cat -t "$called" -p 7 printf '%s\n' "$logentry"

ssus="$(ssu s | grep -iv 'UID:\? ')"; logentry='`ssu status`, UID omitted: '
printf '\n%s\n%s\n' "$(date -Iseconds) $logentry" "$ssus"
systemd-cat -t "$called" -p 7 printf '%s' "$logentry $(printf '%s' "$ssus" | sed 's/$/, /g' | tr -d '\n')" 

ssulr="$(ssu lr | fgrep chum | tr -s ' ')"; logentry='"chum" entries from `ssu lr`:'
printf '\n%s\n%s\n' "$(date -Iseconds) $logentry" "$ssulr"
systemd-cat -t "$called" -p 7 printf '%s' "$logentry $(printf '%s' "$ssulr" | sed -e 's/^ - / /g' -e 's/ ... / /g' | tr -s '\n' ',')" 

# Provide RPM with a little time to proceed finishing the RPM transaction,
# which called this script asynchronously, because pkcon might fail
# enqueuing a pkcon-job while this RPM transaction is unfinished.
# One MUST use the PID of the %posttrans scriptlet as "gppid", NOT the
# PPID of that scriptlet, because that might be the packagekit daemon
# directly calling functions in libzypp (no rpm involved) or rpm!
i=0
maxi=3
rpmXctn=running
while [ $i != $maxi ] && ps -eo pid | fgrep -q "$gppid"
do
  sleep 1
  i=$(($i+1))
done
if [ $i = $maxi ]
then rpmXctn=timedout
else rpmXctn=finished
fi
sleep 1
# `pkcon search name` is also intended to serve as a synchronisation point,
# because most of pkcon's sub-commands wait until the package management
# backend (on SailfishOS: libzypp) is idle:
if pkgname="$(pkcon -p search name "$called" | grep '^Installed ' | tr -s ' ' | cut -f 2 -d ' ' | rev | cut -f 2- -d '.' | rev | grep -m 1 "^$called-[0-9]")"
then pkgkitd=ok
else pkgkitd=KO
fi

# Write $pkgname to logfile:
logentry="[Debug] Installed, now running: $pkgname"
printf '\n%s\n' "$(date -Iseconds) $logentry"
systemd-cat -t "$called" -p 7 printf '%s\n' "$logentry"

# Out of occasional bad experience when pkcon is being hammered with
# commands, also prefix `pkcon repo-set-data` with a second sleep:
sleep 1
maxi=4  # 4 is the minimal value, which makes sense here
maxihalf=$(($maxi/2))
for i in $(seq $maxi)
do
  logentry='pkcon -pv repo-set-data sailfishos-chum refresh-now true'
  printf '\n%s\n' "$(date -Iseconds) [Step 1 / 2] $logentry"
  systemd-cat -t "$called" -p 6 printf '%s\n' "[Info] Executing: $logentry"
  eval $logentry
  retc=$?
  [ $retc = 0 ] && break  # Went fine
  wait=$(($i*2+1))
  if [ $i = 1 ]
  then
    logentry="[Notice] Failed to refresh sailfishos-chum repository, because error-code $retc was returned by: $logentry"
    printf '\n%s\n' "$(date -Iseconds) $logentry"
    systemd-cat -t "$called" -p 5 printf '%s\n' "$logentry"
    logentry="[Debug] Sleeping for $wait seconds."
    printf '%s\n' "$(date -Iseconds) $logentry"
    systemd-cat -t "$called" -p 7 printf '%s\n' "$logentry"
    sleep $wait
    logentry="[Info] Retry #$i"
    printf '\n%s' "$(date -Iseconds) $logentry"
    systemd-cat -t "$called" -p 6 printf '%s\n' "$logentry"
  elif [ $i -le $maxihalf ]
  then
    logentry="[Warning] Failed to refresh sailfishos-chum repository, because error-code $retc was returned by: $logentry"
    printf '\n%s\n' "$(date -Iseconds) $logentry"
    systemd-cat -t "$called" -p 4 printf '%s\n' "$logentry"
    logentry="[Notice] Trying to terminate (i.e., sending SIGTERM to) all processes named (ID) `pkcon`, then sleeping for $wait seconds."
    printf '%s\n' "$(date -Iseconds) $logentry"
    systemd-cat -t "$called" -p 5 printf '%s\n' "$logentry"
    killall -q -TERM pkcon
    sleep $wait
    logentry="[Info] Retry #$i"
    printf '\n%s' "$(date -Iseconds) $logentry"
    systemd-cat -t "$called" -p 6 printf '%s\n' "$logentry"
  elif [ $i -lt $maxi ]
  then
    logentry="[Error] Failed to refresh sailfishos-chum repository, because error-code $retc was returned by: $logentry"
    printf '\n%s\n' "$(date -Iseconds) $logentry"
    systemd-cat -t "$called" -p 3 printf '%s\n' "$logentry"
    logentry="[Warning] Trying to interrupt (i.e., sending SIGINT to) all processes named (ID) `pkcon`, then sleeping for $wait seconds."
    printf '%s\n' "$(date -Iseconds) $logentry"
    systemd-cat -t "$called" -p 4 printf '%s\n' "$logentry"
    killall -q -INT pkcon
    sleep $i
    killall -q -TERM pkcon
    sleep $i
    logentry="[Info] Retry #$i"
    printf '\n%s' "$(date -Iseconds) $logentry"
    systemd-cat -t "$called" -p 6 printf '%s\n' "$logentry"
  else
    logentry="[Error] Failed to refresh sailfishos-chum repository, because error-code $retc was returned by: $logentry"
    printf '\n%s\n' "$(date -Iseconds) $logentry"
    systemd-cat -t "$called" -p 3 printf '%s\n' "$logentry"
    logentry="[Warning] Trying to hang-up (i.e., sending SIGHUP to) all processes named (ID) `pkcon`, then sleeping for $i seconds and ultimately killing them."
    printf '%s\n' "$(date -Iseconds) $logentry"
    systemd-cat -t "$called" -p 4 printf '%s\n' "$logentry"
    killall -q -HUP pkcon
    sleep $i
    killall -qw -KILL pkcon
    sleep 1
    pkcon -pv quit
    sleep 1
    systemctl stop packagekit.service
    systemctl start packagekit.service
    sleep 1
    logentry="[Notice] Final retry #$i"
    printf '\n%s' "$(date -Iseconds) $logentry"
    systemd-cat -t "$called" -p 5 printf '%s\n' "$logentry"
    logentry='pkcon -pv repo-set-data sailfishos-chum refresh-now true'
    printf '\n%s\n' "$(date -Iseconds) [Step 1 / 2] $logentry"
    systemd-cat -t "$called" -p 6 printf '%s\n' "[Info] Executing: $logentry"
    eval $logentry
    retc=$?
    [ $retc = 0 ] && break  # Went fine
    logentry="[Critical] Failed to refresh sailfishos-chum repository, because error-code $retc was returned by: $logentry"
    printf '\n%s\n' "$(date -Iseconds) $logentry"
    systemd-cat -t "$called" -p 2 printf '%s\n' "$logentry"
    killall -qw -KILL pkcon
    sleep 1
    pkcon -pv quit
    sleep 1
    systemctl stop packagekit.service
    systemctl start packagekit.service
    logentry='[Notice] Scheduling sailfishos-chum-gui-installer for removal in 20 seconds, trying to install sailfishos-chum-gui despite the failed repository refresh meanwhile.'
    printf '%s\n' "$(date -Iseconds) $logentry"
    systemd-cat -t "$called" -p 5 printf '%s\n' "$logentry"
    sleep 1
    logentry="pkcon -pvy remove $called"
    setsid --fork sh -c '(i=0; while [ $i -le 9 ] && ps -eo pid | fgrep -q "$1"; do sleep 1; i=$(($i+1)); done;\
                        sleep 20; printf '\n%s\n' "$(date -Iseconds) [Self-removal] $2";\
                        systemd-cat -t "$3" -p 6 printf '%s\n' "[Info] Self-removal in 20 seconds: $2";\
                        eval $2)' sh_rm_inst-chum-gui "$mypid" "$logentry" "$called"
                        # The first 15 characters of the spawned process' name
                        # (to be used for, e.g., `ps` and `pgrep` / `pkill`) are:
                        # sh_rm_inst-chum
  fi
done
logentry='pkcon -pvy install sailfishos-chum-gui'
# Sleeping again for a second right before the next pkcon call, because pkcon
# *rarely* fails installing a package ("not found") immediately after an
# individual repository refresh via `repo-set-data <repo> refresh-now true`.
# The following statement must be started fully detached (by a "double fork"
# / "daemonize"), because this script file will be removed when installing
# the SailfishOS:Chum GUI app (because the Installer package conflicts with
# it), which might cause issues, if it is still opened for executing / reading
# it.
# It also shall always be the last command issued (WRT control-flow),
# except for the final log message.
setsid --fork sh -c '(sleep 1;\
                    i=0; while [ $i -le 9 ] && ps -eo pid | fgrep -q "$1"; do sleep 1; i=$(($i+1)); done;\
                    printf '\n%s\n' "$(date -Iseconds) [Step 2 / 2] $2";\
                    systemd-cat -t "$3" -p 6 printf '%s\n' "[Info] Executing: $2";\
                    eval $2)' sh_do_inst-chum-gui "$mypid" "$logentry" "$called"
                    # The first 15 characters of the spawned process' name
                    # (to be used for, e.g., `ps` and `pgrep` / `pkill`) are:
                    # sh_do_inst-chum
# Double-fork / "Daemonise" ("SysV-style") in shell code, (ab)using this
# interpreter instance for the preamble (setting the environment):
# PWD and umask do not need to be set anew here, see lines 53 and 54.
# For a detailed description of double-forking in shell code, see
# https://github.com/storeman-developers/harbour-storeman-installer/blob/master/double-fork-in-shell.md
logentry="[Debug] ${called}'s main script (PID: ${mypid}) finishes"
printf '\n%s\n' "$(date -Iseconds) $logentry"
systemd-cat -t "$called" -p 7 printf '%s\n' "$logentry"
exit $retc

